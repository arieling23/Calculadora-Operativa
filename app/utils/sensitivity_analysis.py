import google.generativeai as genai
import os
from dotenv import load_dotenv
load_dotenv()

# Configurar Gemini AI
API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

def analyze_sensitivity(data, solution):
    from models.linear_program import solve_linear_problem  # Importaci√≥n dentro de la funci√≥n

    perturbation = 0.01
    sensitivities = {}

    # Verificar que la soluci√≥n original sea v√°lida
    if not solution or "objective_value" not in solution:
        print("‚ùå Soluci√≥n original no v√°lida para an√°lisis de sensibilidad")
        return {}

    original_objective_value = solution["objective_value"]

    for i, var in enumerate(data["variables"]):
        try:
            # Crear una copia de los datos con el coeficiente modificado
            modified_coeffs = data["objective_coeffs"][:]
            modified_coeffs[i] += perturbation
            new_data = data.copy()
            new_data["objective_coeffs"] = modified_coeffs

            # Resolver el problema modificado
            new_solution = solve_linear_problem(new_data)
            
            # Verificar que la nueva soluci√≥n sea v√°lida
            if new_solution and "objective_value" in new_solution:
                # Calcular la sensibilidad
                sensitivity = (new_solution["objective_value"] - original_objective_value) / perturbation
                sensitivities[var] = sensitivity
                print(f"‚úÖ Sensibilidad calculada para {var}: {sensitivity}")
            else:
                print(f"‚ùå No se pudo calcular sensibilidad para {var}: soluci√≥n inv√°lida")
                sensitivities[var] = 0.0
                
        except Exception as e:
            print(f"‚ùå Error calculando sensibilidad para {var}: {str(e)}")
            sensitivities[var] = 0.0

    print(f"üìä An√°lisis de sensibilidad completado: {sensitivities}")
    return sensitivities

def generate_intelligent_sensitivity_analysis(data, solution, sensitivities, method):
    """
    Genera un an√°lisis de sensibilidad inteligente usando Gemini AI para programaci√≥n lineal.
    """
    try:
        # Preparar la informaci√≥n para el an√°lisis
        objective_type = "Maximizaci√≥n" if data["objective"] == "max" else "Minimizaci√≥n"
        variables_info = ", ".join([f"{var} (coef: {data['objective_coeffs'][i]})" 
                                   for i, var in enumerate(data["variables"])])
        
        constraints_info = []
        for i, constraint in enumerate(data["constraints"]):
            constraint_str = " + ".join([f"{constraint['coeffs'][j]}{data['variables'][j]}" 
                                       for j in range(len(constraint['coeffs']))])
            constraints_info.append(f"Restricci√≥n {i+1}: {constraint_str} {constraint['sign']} {constraint['rhs']}")
        
        prompt = f"""Realiza un an√°lisis de sensibilidad detallado para un problema de programaci√≥n lineal:

**Datos del Problema:**
- Tipo de objetivo: {objective_type}
- Variables: {variables_info}
- Restricciones: {chr(10).join(constraints_info)}
- M√©todo de soluci√≥n: {method}

**Soluci√≥n √ìptima:**
- Valor √≥ptimo: {solution.get('objective_value', 'N/A')}
- Valores de variables: {solution.get('variable_values', {})}
- Estado: {solution.get('status', 'N/A')}

**An√°lisis de Sensibilidad (valores num√©ricos):**
{sensitivities}

**Instrucciones para el an√°lisis:**
1Ô∏è‚É£ **Interpretaci√≥n de Sensibilidad**: Explica qu√© significan estos valores de sensibilidad en t√©rminos pr√°cticos.
2Ô∏è‚É£ **Variables Cr√≠ticas**: Identifica qu√© variables son m√°s sensibles y por qu√©.
3Ô∏è‚É£ **Recomendaciones de Gesti√≥n**: Sugiere estrategias para manejar las variables m√°s sensibles.
4Ô∏è‚É£ **An√°lisis de Riesgo**: Eval√∫a qu√© tan robusta es la soluci√≥n actual.
5Ô∏è‚É£ **Oportunidades de Mejora**: Identifica posibles ajustes que podr√≠an optimizar mejor el resultado.

Presenta la respuesta de manera clara y estructurada, usando lenguaje comprensible para un usuario de negocios.
"""

        response = model.generate_content(prompt).text
        return response
        
    except Exception as e:
        print(f"‚ùå Error generando an√°lisis inteligente: {str(e)}")
        return f"Error al generar an√°lisis inteligente: {str(e)}"
